// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/chkpt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fchkpt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fchkpt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fchkpt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fchkpt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fchkpt_2eproto;
namespace chkpt {
class Checkpoint;
class CheckpointDefaultTypeInternal;
extern CheckpointDefaultTypeInternal _Checkpoint_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Type;
class TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace chkpt
PROTOBUF_NAMESPACE_OPEN
template<> ::chkpt::Checkpoint* Arena::CreateMaybeMessage<::chkpt::Checkpoint>(Arena*);
template<> ::chkpt::Frame* Arena::CreateMaybeMessage<::chkpt::Frame>(Arena*);
template<> ::chkpt::Type* Arena::CreateMaybeMessage<::chkpt::Type>(Arena*);
template<> ::chkpt::Value* Arena::CreateMaybeMessage<::chkpt::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chkpt {

enum Type_Enum : int {
  Type_Enum_UNSPECIFIED = 0,
  Type_Enum_I32 = 1,
  Type_Enum_I64 = 2,
  Type_Enum_F32 = 3,
  Type_Enum_F64 = 4,
  Type_Enum_Type_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_Enum_Type_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_Enum_IsValid(int value);
constexpr Type_Enum Type_Enum_Enum_MIN = Type_Enum_UNSPECIFIED;
constexpr Type_Enum Type_Enum_Enum_MAX = Type_Enum_F64;
constexpr int Type_Enum_Enum_ARRAYSIZE = Type_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_Enum_descriptor();
template<typename T>
inline const std::string& Type_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_Enum_descriptor(), enum_t_value);
}
inline bool Type_Enum_Parse(
    const std::string& name, Type_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type_Enum>(
    Type_Enum_descriptor(), name, value);
}
// ===================================================================

class Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chkpt.Type) */ {
 public:
  inline Type() : Type(nullptr) {};
  virtual ~Type();

  Type(const Type& from);
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type& operator=(Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }
  inline void Swap(Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Type* New() const final {
    return CreateMaybeMessage<Type>(nullptr);
  }

  Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chkpt.Type";
  }
  protected:
  explicit Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fchkpt_2eproto);
    return ::descriptor_table_protobuf_2fchkpt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Type_Enum Enum;
  static constexpr Enum UNSPECIFIED =
    Type_Enum_UNSPECIFIED;
  static constexpr Enum I32 =
    Type_Enum_I32;
  static constexpr Enum I64 =
    Type_Enum_I64;
  static constexpr Enum F32 =
    Type_Enum_F32;
  static constexpr Enum F64 =
    Type_Enum_F64;
  static inline bool Enum_IsValid(int value) {
    return Type_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    Type_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    Type_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    Type_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return Type_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return Type_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(const std::string& name,
      Enum* value) {
    return Type_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chkpt.Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fchkpt_2eproto;
};
// -------------------------------------------------------------------

class Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chkpt.Value) */ {
 public:
  inline Value() : Value(nullptr) {};
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  enum TestOneofCase {
    kI32 = 2,
    kI64 = 3,
    kF32 = 4,
    kF64 = 5,
    TEST_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chkpt.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fchkpt_2eproto);
    return ::descriptor_table_protobuf_2fchkpt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kI32FieldNumber = 2,
    kI64FieldNumber = 3,
    kF32FieldNumber = 4,
    kF64FieldNumber = 5,
  };
  // .chkpt.Type.Enum type = 1;
  void clear_type();
  ::chkpt::Type_Enum type() const;
  void set_type(::chkpt::Type_Enum value);
  private:
  ::chkpt::Type_Enum _internal_type() const;
  void _internal_set_type(::chkpt::Type_Enum value);
  public:

  // int32 i32 = 2;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  ::PROTOBUF_NAMESPACE_ID::int32 i32() const;
  void set_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32() const;
  void _internal_set_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 i64 = 3;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  ::PROTOBUF_NAMESPACE_ID::int64 i64() const;
  void set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i64() const;
  void _internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float f32 = 4;
  private:
  bool _internal_has_f32() const;
  public:
  void clear_f32();
  float f32() const;
  void set_f32(float value);
  private:
  float _internal_f32() const;
  void _internal_set_f32(float value);
  public:

  // double f64 = 5;
  private:
  bool _internal_has_f64() const;
  public:
  void clear_f64();
  double f64() const;
  void set_f64(double value);
  private:
  double _internal_f64() const;
  void _internal_set_f64(double value);
  public:

  void clear_test_oneof();
  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:chkpt.Value)
 private:
  class _Internal;
  void set_has_i32();
  void set_has_i64();
  void set_has_f32();
  void set_has_f64();

  inline bool has_test_oneof() const;
  inline void clear_has_test_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 i32_;
    ::PROTOBUF_NAMESPACE_ID::int64 i64_;
    float f32_;
    double f64_;
  } test_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protobuf_2fchkpt_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chkpt.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {};
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chkpt.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fchkpt_2eproto);
    return ::descriptor_table_protobuf_2fchkpt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalsFieldNumber = 3,
    kStackFieldNumber = 4,
    kFnIdxFieldNumber = 1,
    kPcFieldNumber = 2,
  };
  // repeated .chkpt.Value locals = 3;
  int locals_size() const;
  private:
  int _internal_locals_size() const;
  public:
  void clear_locals();
  ::chkpt::Value* mutable_locals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >*
      mutable_locals();
  private:
  const ::chkpt::Value& _internal_locals(int index) const;
  ::chkpt::Value* _internal_add_locals();
  public:
  const ::chkpt::Value& locals(int index) const;
  ::chkpt::Value* add_locals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >&
      locals() const;

  // repeated .chkpt.Value stack = 4;
  int stack_size() const;
  private:
  int _internal_stack_size() const;
  public:
  void clear_stack();
  ::chkpt::Value* mutable_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >*
      mutable_stack();
  private:
  const ::chkpt::Value& _internal_stack(int index) const;
  ::chkpt::Value* _internal_add_stack();
  public:
  const ::chkpt::Value& stack(int index) const;
  ::chkpt::Value* add_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >&
      stack() const;

  // int32 fn_idx = 1;
  void clear_fn_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 fn_idx() const;
  void set_fn_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fn_idx() const;
  void _internal_set_fn_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pc = 2;
  void clear_pc();
  ::PROTOBUF_NAMESPACE_ID::int32 pc() const;
  void set_pc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pc() const;
  void _internal_set_pc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chkpt.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value > locals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value > stack_;
  ::PROTOBUF_NAMESPACE_ID::int32 fn_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 pc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fchkpt_2eproto;
};
// -------------------------------------------------------------------

class Checkpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chkpt.Checkpoint) */ {
 public:
  inline Checkpoint() : Checkpoint(nullptr) {};
  virtual ~Checkpoint();

  Checkpoint(const Checkpoint& from);
  Checkpoint(Checkpoint&& from) noexcept
    : Checkpoint() {
    *this = ::std::move(from);
  }

  inline Checkpoint& operator=(const Checkpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Checkpoint& operator=(Checkpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Checkpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Checkpoint* internal_default_instance() {
    return reinterpret_cast<const Checkpoint*>(
               &_Checkpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Checkpoint& a, Checkpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Checkpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Checkpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Checkpoint* New() const final {
    return CreateMaybeMessage<Checkpoint>(nullptr);
  }

  Checkpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Checkpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Checkpoint& from);
  void MergeFrom(const Checkpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Checkpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chkpt.Checkpoint";
  }
  protected:
  explicit Checkpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fchkpt_2eproto);
    return ::descriptor_table_protobuf_2fchkpt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
    kGlobalsFieldNumber = 2,
    kTableFieldNumber = 3,
    kMemoryLz4FieldNumber = 5,
    kMemoryFieldNumber = 6,
    kMemorySizeFieldNumber = 4,
  };
  // repeated .chkpt.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::chkpt::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Frame >*
      mutable_frames();
  private:
  const ::chkpt::Frame& _internal_frames(int index) const;
  ::chkpt::Frame* _internal_add_frames();
  public:
  const ::chkpt::Frame& frames(int index) const;
  ::chkpt::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Frame >&
      frames() const;

  // repeated .chkpt.Value globals = 2;
  int globals_size() const;
  private:
  int _internal_globals_size() const;
  public:
  void clear_globals();
  ::chkpt::Value* mutable_globals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >*
      mutable_globals();
  private:
  const ::chkpt::Value& _internal_globals(int index) const;
  ::chkpt::Value* _internal_add_globals();
  public:
  const ::chkpt::Value& globals(int index) const;
  ::chkpt::Value* add_globals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >&
      globals() const;

  // repeated int32 table = 3;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_table() const;
  void _internal_add_table(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_table();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 table(int index) const;
  void set_table(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_table(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_table();

  // bytes memory_lz4 = 5;
  void clear_memory_lz4();
  const std::string& memory_lz4() const;
  void set_memory_lz4(const std::string& value);
  void set_memory_lz4(std::string&& value);
  void set_memory_lz4(const char* value);
  void set_memory_lz4(const void* value, size_t size);
  std::string* mutable_memory_lz4();
  std::string* release_memory_lz4();
  void set_allocated_memory_lz4(std::string* memory_lz4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_memory_lz4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_memory_lz4(
      std::string* memory_lz4);
  private:
  const std::string& _internal_memory_lz4() const;
  void _internal_set_memory_lz4(const std::string& value);
  std::string* _internal_mutable_memory_lz4();
  public:

  // bytes memory = 6;
  void clear_memory();
  const std::string& memory() const;
  void set_memory(const std::string& value);
  void set_memory(std::string&& value);
  void set_memory(const char* value);
  void set_memory(const void* value, size_t size);
  std::string* mutable_memory();
  std::string* release_memory();
  void set_allocated_memory(std::string* memory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_memory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_memory(
      std::string* memory);
  private:
  const std::string& _internal_memory() const;
  void _internal_set_memory(const std::string& value);
  std::string* _internal_mutable_memory();
  public:

  // int32 memory_size = 4;
  void clear_memory_size();
  ::PROTOBUF_NAMESPACE_ID::int32 memory_size() const;
  void set_memory_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory_size() const;
  void _internal_set_memory_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chkpt.Checkpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value > globals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > table_;
  mutable std::atomic<int> _table_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_lz4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fchkpt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Type

// -------------------------------------------------------------------

// Value

// .chkpt.Type.Enum type = 1;
inline void Value::clear_type() {
  type_ = 0;
}
inline ::chkpt::Type_Enum Value::_internal_type() const {
  return static_cast< ::chkpt::Type_Enum >(type_);
}
inline ::chkpt::Type_Enum Value::type() const {
  // @@protoc_insertion_point(field_get:chkpt.Value.type)
  return _internal_type();
}
inline void Value::_internal_set_type(::chkpt::Type_Enum value) {
  
  type_ = value;
}
inline void Value::set_type(::chkpt::Type_Enum value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chkpt.Value.type)
}

// int32 i32 = 2;
inline bool Value::_internal_has_i32() const {
  return test_oneof_case() == kI32;
}
inline void Value::set_has_i32() {
  _oneof_case_[0] = kI32;
}
inline void Value::clear_i32() {
  if (_internal_has_i32()) {
    test_oneof_.i32_ = 0;
    clear_has_test_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Value::_internal_i32() const {
  if (_internal_has_i32()) {
    return test_oneof_.i32_;
  }
  return 0;
}
inline void Value::_internal_set_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_i32()) {
    clear_test_oneof();
    set_has_i32();
  }
  test_oneof_.i32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Value::i32() const {
  // @@protoc_insertion_point(field_get:chkpt.Value.i32)
  return _internal_i32();
}
inline void Value::set_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:chkpt.Value.i32)
}

// int64 i64 = 3;
inline bool Value::_internal_has_i64() const {
  return test_oneof_case() == kI64;
}
inline void Value::set_has_i64() {
  _oneof_case_[0] = kI64;
}
inline void Value::clear_i64() {
  if (_internal_has_i64()) {
    test_oneof_.i64_ = PROTOBUF_LONGLONG(0);
    clear_has_test_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::_internal_i64() const {
  if (_internal_has_i64()) {
    return test_oneof_.i64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Value::_internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i64()) {
    clear_test_oneof();
    set_has_i64();
  }
  test_oneof_.i64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::i64() const {
  // @@protoc_insertion_point(field_get:chkpt.Value.i64)
  return _internal_i64();
}
inline void Value::set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:chkpt.Value.i64)
}

// float f32 = 4;
inline bool Value::_internal_has_f32() const {
  return test_oneof_case() == kF32;
}
inline void Value::set_has_f32() {
  _oneof_case_[0] = kF32;
}
inline void Value::clear_f32() {
  if (_internal_has_f32()) {
    test_oneof_.f32_ = 0;
    clear_has_test_oneof();
  }
}
inline float Value::_internal_f32() const {
  if (_internal_has_f32()) {
    return test_oneof_.f32_;
  }
  return 0;
}
inline void Value::_internal_set_f32(float value) {
  if (!_internal_has_f32()) {
    clear_test_oneof();
    set_has_f32();
  }
  test_oneof_.f32_ = value;
}
inline float Value::f32() const {
  // @@protoc_insertion_point(field_get:chkpt.Value.f32)
  return _internal_f32();
}
inline void Value::set_f32(float value) {
  _internal_set_f32(value);
  // @@protoc_insertion_point(field_set:chkpt.Value.f32)
}

// double f64 = 5;
inline bool Value::_internal_has_f64() const {
  return test_oneof_case() == kF64;
}
inline void Value::set_has_f64() {
  _oneof_case_[0] = kF64;
}
inline void Value::clear_f64() {
  if (_internal_has_f64()) {
    test_oneof_.f64_ = 0;
    clear_has_test_oneof();
  }
}
inline double Value::_internal_f64() const {
  if (_internal_has_f64()) {
    return test_oneof_.f64_;
  }
  return 0;
}
inline void Value::_internal_set_f64(double value) {
  if (!_internal_has_f64()) {
    clear_test_oneof();
    set_has_f64();
  }
  test_oneof_.f64_ = value;
}
inline double Value::f64() const {
  // @@protoc_insertion_point(field_get:chkpt.Value.f64)
  return _internal_f64();
}
inline void Value::set_f64(double value) {
  _internal_set_f64(value);
  // @@protoc_insertion_point(field_set:chkpt.Value.f64)
}

inline bool Value::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void Value::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline Value::TestOneofCase Value::test_oneof_case() const {
  return Value::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Frame

// int32 fn_idx = 1;
inline void Frame::clear_fn_idx() {
  fn_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_fn_idx() const {
  return fn_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::fn_idx() const {
  // @@protoc_insertion_point(field_get:chkpt.Frame.fn_idx)
  return _internal_fn_idx();
}
inline void Frame::_internal_set_fn_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fn_idx_ = value;
}
inline void Frame::set_fn_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fn_idx(value);
  // @@protoc_insertion_point(field_set:chkpt.Frame.fn_idx)
}

// int32 pc = 2;
inline void Frame::clear_pc() {
  pc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_pc() const {
  return pc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::pc() const {
  // @@protoc_insertion_point(field_get:chkpt.Frame.pc)
  return _internal_pc();
}
inline void Frame::_internal_set_pc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pc_ = value;
}
inline void Frame::set_pc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:chkpt.Frame.pc)
}

// repeated .chkpt.Value locals = 3;
inline int Frame::_internal_locals_size() const {
  return locals_.size();
}
inline int Frame::locals_size() const {
  return _internal_locals_size();
}
inline void Frame::clear_locals() {
  locals_.Clear();
}
inline ::chkpt::Value* Frame::mutable_locals(int index) {
  // @@protoc_insertion_point(field_mutable:chkpt.Frame.locals)
  return locals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >*
Frame::mutable_locals() {
  // @@protoc_insertion_point(field_mutable_list:chkpt.Frame.locals)
  return &locals_;
}
inline const ::chkpt::Value& Frame::_internal_locals(int index) const {
  return locals_.Get(index);
}
inline const ::chkpt::Value& Frame::locals(int index) const {
  // @@protoc_insertion_point(field_get:chkpt.Frame.locals)
  return _internal_locals(index);
}
inline ::chkpt::Value* Frame::_internal_add_locals() {
  return locals_.Add();
}
inline ::chkpt::Value* Frame::add_locals() {
  // @@protoc_insertion_point(field_add:chkpt.Frame.locals)
  return _internal_add_locals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >&
Frame::locals() const {
  // @@protoc_insertion_point(field_list:chkpt.Frame.locals)
  return locals_;
}

// repeated .chkpt.Value stack = 4;
inline int Frame::_internal_stack_size() const {
  return stack_.size();
}
inline int Frame::stack_size() const {
  return _internal_stack_size();
}
inline void Frame::clear_stack() {
  stack_.Clear();
}
inline ::chkpt::Value* Frame::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:chkpt.Frame.stack)
  return stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >*
Frame::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:chkpt.Frame.stack)
  return &stack_;
}
inline const ::chkpt::Value& Frame::_internal_stack(int index) const {
  return stack_.Get(index);
}
inline const ::chkpt::Value& Frame::stack(int index) const {
  // @@protoc_insertion_point(field_get:chkpt.Frame.stack)
  return _internal_stack(index);
}
inline ::chkpt::Value* Frame::_internal_add_stack() {
  return stack_.Add();
}
inline ::chkpt::Value* Frame::add_stack() {
  // @@protoc_insertion_point(field_add:chkpt.Frame.stack)
  return _internal_add_stack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >&
Frame::stack() const {
  // @@protoc_insertion_point(field_list:chkpt.Frame.stack)
  return stack_;
}

// -------------------------------------------------------------------

// Checkpoint

// repeated .chkpt.Frame frames = 1;
inline int Checkpoint::_internal_frames_size() const {
  return frames_.size();
}
inline int Checkpoint::frames_size() const {
  return _internal_frames_size();
}
inline void Checkpoint::clear_frames() {
  frames_.Clear();
}
inline ::chkpt::Frame* Checkpoint::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:chkpt.Checkpoint.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Frame >*
Checkpoint::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:chkpt.Checkpoint.frames)
  return &frames_;
}
inline const ::chkpt::Frame& Checkpoint::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::chkpt::Frame& Checkpoint::frames(int index) const {
  // @@protoc_insertion_point(field_get:chkpt.Checkpoint.frames)
  return _internal_frames(index);
}
inline ::chkpt::Frame* Checkpoint::_internal_add_frames() {
  return frames_.Add();
}
inline ::chkpt::Frame* Checkpoint::add_frames() {
  // @@protoc_insertion_point(field_add:chkpt.Checkpoint.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Frame >&
Checkpoint::frames() const {
  // @@protoc_insertion_point(field_list:chkpt.Checkpoint.frames)
  return frames_;
}

// repeated .chkpt.Value globals = 2;
inline int Checkpoint::_internal_globals_size() const {
  return globals_.size();
}
inline int Checkpoint::globals_size() const {
  return _internal_globals_size();
}
inline void Checkpoint::clear_globals() {
  globals_.Clear();
}
inline ::chkpt::Value* Checkpoint::mutable_globals(int index) {
  // @@protoc_insertion_point(field_mutable:chkpt.Checkpoint.globals)
  return globals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >*
Checkpoint::mutable_globals() {
  // @@protoc_insertion_point(field_mutable_list:chkpt.Checkpoint.globals)
  return &globals_;
}
inline const ::chkpt::Value& Checkpoint::_internal_globals(int index) const {
  return globals_.Get(index);
}
inline const ::chkpt::Value& Checkpoint::globals(int index) const {
  // @@protoc_insertion_point(field_get:chkpt.Checkpoint.globals)
  return _internal_globals(index);
}
inline ::chkpt::Value* Checkpoint::_internal_add_globals() {
  return globals_.Add();
}
inline ::chkpt::Value* Checkpoint::add_globals() {
  // @@protoc_insertion_point(field_add:chkpt.Checkpoint.globals)
  return _internal_add_globals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chkpt::Value >&
Checkpoint::globals() const {
  // @@protoc_insertion_point(field_list:chkpt.Checkpoint.globals)
  return globals_;
}

// repeated int32 table = 3;
inline int Checkpoint::_internal_table_size() const {
  return table_.size();
}
inline int Checkpoint::table_size() const {
  return _internal_table_size();
}
inline void Checkpoint::clear_table() {
  table_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Checkpoint::_internal_table(int index) const {
  return table_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Checkpoint::table(int index) const {
  // @@protoc_insertion_point(field_get:chkpt.Checkpoint.table)
  return _internal_table(index);
}
inline void Checkpoint::set_table(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:chkpt.Checkpoint.table)
}
inline void Checkpoint::_internal_add_table(::PROTOBUF_NAMESPACE_ID::int32 value) {
  table_.Add(value);
}
inline void Checkpoint::add_table(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_table(value);
  // @@protoc_insertion_point(field_add:chkpt.Checkpoint.table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Checkpoint::_internal_table() const {
  return table_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Checkpoint::table() const {
  // @@protoc_insertion_point(field_list:chkpt.Checkpoint.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Checkpoint::_internal_mutable_table() {
  return &table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Checkpoint::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:chkpt.Checkpoint.table)
  return _internal_mutable_table();
}

// int32 memory_size = 4;
inline void Checkpoint::clear_memory_size() {
  memory_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Checkpoint::_internal_memory_size() const {
  return memory_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Checkpoint::memory_size() const {
  // @@protoc_insertion_point(field_get:chkpt.Checkpoint.memory_size)
  return _internal_memory_size();
}
inline void Checkpoint::_internal_set_memory_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memory_size_ = value;
}
inline void Checkpoint::set_memory_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory_size(value);
  // @@protoc_insertion_point(field_set:chkpt.Checkpoint.memory_size)
}

// bytes memory_lz4 = 5;
inline void Checkpoint::clear_memory_lz4() {
  memory_lz4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Checkpoint::memory_lz4() const {
  // @@protoc_insertion_point(field_get:chkpt.Checkpoint.memory_lz4)
  return _internal_memory_lz4();
}
inline void Checkpoint::set_memory_lz4(const std::string& value) {
  _internal_set_memory_lz4(value);
  // @@protoc_insertion_point(field_set:chkpt.Checkpoint.memory_lz4)
}
inline std::string* Checkpoint::mutable_memory_lz4() {
  // @@protoc_insertion_point(field_mutable:chkpt.Checkpoint.memory_lz4)
  return _internal_mutable_memory_lz4();
}
inline const std::string& Checkpoint::_internal_memory_lz4() const {
  return memory_lz4_.Get();
}
inline void Checkpoint::_internal_set_memory_lz4(const std::string& value) {
  
  memory_lz4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Checkpoint::set_memory_lz4(std::string&& value) {
  
  memory_lz4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chkpt.Checkpoint.memory_lz4)
}
inline void Checkpoint::set_memory_lz4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memory_lz4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chkpt.Checkpoint.memory_lz4)
}
inline void Checkpoint::set_memory_lz4(const void* value,
    size_t size) {
  
  memory_lz4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chkpt.Checkpoint.memory_lz4)
}
inline std::string* Checkpoint::_internal_mutable_memory_lz4() {
  
  return memory_lz4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Checkpoint::release_memory_lz4() {
  // @@protoc_insertion_point(field_release:chkpt.Checkpoint.memory_lz4)
  return memory_lz4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_memory_lz4(std::string* memory_lz4) {
  if (memory_lz4 != nullptr) {
    
  } else {
    
  }
  memory_lz4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memory_lz4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chkpt.Checkpoint.memory_lz4)
}
inline std::string* Checkpoint::unsafe_arena_release_memory_lz4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chkpt.Checkpoint.memory_lz4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return memory_lz4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Checkpoint::unsafe_arena_set_allocated_memory_lz4(
    std::string* memory_lz4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (memory_lz4 != nullptr) {
    
  } else {
    
  }
  memory_lz4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      memory_lz4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chkpt.Checkpoint.memory_lz4)
}

// bytes memory = 6;
inline void Checkpoint::clear_memory() {
  memory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Checkpoint::memory() const {
  // @@protoc_insertion_point(field_get:chkpt.Checkpoint.memory)
  return _internal_memory();
}
inline void Checkpoint::set_memory(const std::string& value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:chkpt.Checkpoint.memory)
}
inline std::string* Checkpoint::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:chkpt.Checkpoint.memory)
  return _internal_mutable_memory();
}
inline const std::string& Checkpoint::_internal_memory() const {
  return memory_.Get();
}
inline void Checkpoint::_internal_set_memory(const std::string& value) {
  
  memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Checkpoint::set_memory(std::string&& value) {
  
  memory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chkpt.Checkpoint.memory)
}
inline void Checkpoint::set_memory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chkpt.Checkpoint.memory)
}
inline void Checkpoint::set_memory(const void* value,
    size_t size) {
  
  memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chkpt.Checkpoint.memory)
}
inline std::string* Checkpoint::_internal_mutable_memory() {
  
  return memory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Checkpoint::release_memory() {
  // @@protoc_insertion_point(field_release:chkpt.Checkpoint.memory)
  return memory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Checkpoint::set_allocated_memory(std::string* memory) {
  if (memory != nullptr) {
    
  } else {
    
  }
  memory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chkpt.Checkpoint.memory)
}
inline std::string* Checkpoint::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chkpt.Checkpoint.memory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return memory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Checkpoint::unsafe_arena_set_allocated_memory(
    std::string* memory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (memory != nullptr) {
    
  } else {
    
  }
  memory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      memory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chkpt.Checkpoint.memory)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chkpt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chkpt::Type_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chkpt::Type_Enum>() {
  return ::chkpt::Type_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fchkpt_2eproto
